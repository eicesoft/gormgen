///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package project

import (
	"fmt"
	"github.com/pkg/errors"
	"gorm.io/gorm"
	"time"
)

type Predicate string

const (
	EqualPredicate              = Predicate("=")
	NotEqualPredicate           = Predicate("<>")
	GreaterThanPredicate        = Predicate(">")
	GreaterThanOrEqualPredicate = Predicate(">=")
	SmallerThanPredicate        = Predicate("<")
	SmallerThanOrEqualPredicate = Predicate("<=")
	LikePredicate               = Predicate("LIKE")
)

func NewModel() *Project {
	return new(Project)
}

func NewQueryBuilder() *QueryBuilder {
	return new(QueryBuilder)
}

func (t *Project) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

func (t *Project) Delete(db *gorm.DB) (err error) {
	if err = db.Delete(t).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (t *Project) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = db.Model(&Project{}).Where("id = ?", t.Id).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

type QueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *QueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = qb.buildUpdateQuery(db).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *QueryBuilder) buildUpdateQuery(db *gorm.DB) *gorm.DB {
	ret := db.Model(&Project{})
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	return ret
}

func (qb *QueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *QueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Project{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *QueryBuilder) First(db *gorm.DB) (*Project, error) {
	ret := &Project{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *QueryBuilder) QueryOne(db *gorm.DB) (*Project, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *QueryBuilder) QueryAll(db *gorm.DB) ([]*Project, error) {
	var ret []*Project
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *QueryBuilder) Limit(limit int) *QueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *QueryBuilder) Offset(offset int) *QueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *QueryBuilder) WhereId(p Predicate, value int32) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereIdIn(value []int32) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereIdNotIn(value []int32) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) OrderById(asc bool) *QueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *QueryBuilder) WhereTitle(p Predicate, value string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", p),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereTitleIn(value []string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereTitleNotIn(value []string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "NOT IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) OrderByTitle(asc bool) *QueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "title "+order)
	return qb
}

func (qb *QueryBuilder) WhereDesc(p Predicate, value string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "desc", p),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereDescIn(value []string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "desc", "IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereDescNotIn(value []string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "desc", "NOT IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) OrderByDesc(asc bool) *QueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "desc "+order)
	return qb
}

func (qb *QueryBuilder) WhereGitUrl(p Predicate, value string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "git_url", p),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereGitUrlIn(value []string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "git_url", "IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereGitUrlNotIn(value []string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "git_url", "NOT IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) OrderByGitUrl(asc bool) *QueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "git_url "+order)
	return qb
}

func (qb *QueryBuilder) WhereGitType(p Predicate, value int32) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "git_type", p),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereGitTypeIn(value []int32) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "git_type", "IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereGitTypeNotIn(value []int32) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "git_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) OrderByGitType(asc bool) *QueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "git_type "+order)
	return qb
}

func (qb *QueryBuilder) WhereGitBranch(p Predicate, value string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "git_branch", p),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereGitBranchIn(value []string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "git_branch", "IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereGitBranchNotIn(value []string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "git_branch", "NOT IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) OrderByGitBranch(asc bool) *QueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "git_branch "+order)
	return qb
}

func (qb *QueryBuilder) WhereClusterIds(p Predicate, value string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cluster_ids", p),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereClusterIdsIn(value []string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cluster_ids", "IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereClusterIdsNotIn(value []string) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cluster_ids", "NOT IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) OrderByClusterIds(asc bool) *QueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "cluster_ids "+order)
	return qb
}

func (qb *QueryBuilder) WhereCreatedAt(p Predicate, value time.Time) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereCreatedAtIn(value []time.Time) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereCreatedAtNotIn(value []time.Time) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) OrderByCreatedAt(asc bool) *QueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *QueryBuilder) WhereUpdatedAt(p Predicate, value time.Time) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereUpdatedAtIn(value []time.Time) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *QueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *QueryBuilder) OrderByUpdatedAt(asc bool) *QueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}
